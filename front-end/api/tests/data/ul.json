{ "docs":
    [
        {
            "uid":          "unifiedNewer",
            "source":       "unified",
            "sid":          "unifiedNewer",
            "name":         "sample product 1",
            "description":  "sample description 1",
            "manufacturer": { "name": "sample manufacturer 1" },
            "updated":      "2015-01-01"
        },
        {
            "uid":          "unifiedNewer",
            "source":       "admin",
            "sid":          "admin1",
            "name":         "sample product 1",
            "description":  "sample description 1",
            "manufacturer": { "name": "sample manufacturer 1" },
            "updated":      "2014-01-01"
        },
        {
            "uid":          "unifiedOlder",
            "source":       "unified",
            "sid":          "unifiedOlder",
            "name":         "sample product 2",
            "description":  "sample description 2",
            "manufacturer": { "name": "sample manufacturer 2" },
            "updated":      "2013-01-01"
        },
        {
            "uid":          "unifiedOlder",
            "source":       "admin",
            "sid":          "admin2",
            "name":         "sample product 2",
            "description":  "sample description 2",
            "manufacturer": { "name": "sample manufacturer 2" },
            "updated":      "2014-01-01"
        },
        {
            "_id": "_design/ul",
            "lists": {
                "unified": "function(head, req) { // jshint ignore:line\n    // WARNING:  Pouch will fail horribly if the first line of your list function is a comment.  The next line\n    // had to be moved down to avoid spurious messages about things \"not evaluating to a function\"\n    //\n    // Reduce all the records with the same \"parent\" ID to a single structure using a list function...\n    function combine(existingRecord, newRecord) { // jshint ignore:line\n        var combinedRecord = existingRecord ? JSON.parse(JSON.stringify(existingRecord)) : {};\n\n        if (existingRecord) {\n            if (newRecord.source === \"unified\") {\n                combinedRecord = JSON.parse(JSON.stringify(newRecord));\n                if (!combinedRecord.sources) {\n                    combinedRecord.sources = [];\n                }\n\n                if (existingRecord.sources) {\n                    existingRecord.sources.forEach(function(source){\n                        combinedRecord.sources.push(JSON.parse(JSON.stringify(source)));\n                    });\n                }\n            }\n            else if (newRecord.sources) {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                newRecord.sources.forEach(function(record){\n                    if (record) {\n                        combinedRecord.sources.push(JSON.parse(JSON.stringify(record)));\n                    }\n                });\n            }\n            else {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                combinedRecord.sources.push(JSON.parse(JSON.stringify(newRecord)));\n            }\n        }\n        else {\n            if (newRecord.source === \"unified\") {\n                combinedRecord = JSON.parse(JSON.stringify(newRecord));\n            }\n            else if (newRecord.sources) {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                newRecord.sources.forEach(function(record){\n                    combinedRecord.sources.push(JSON.parse(JSON.stringify(record)));\n                });\n            }\n            else {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                combinedRecord.sources.push(JSON.parse(JSON.stringify(newRecord)));\n            }\n        }\n\n        return combinedRecord;\n    }\n\n    // Build the full map of records and then return them\n    var dataMap = {};\n\n    var row;\n    while (row = getRow()) { // jshint ignore: line\n        var record = row.value;\n        if (record.uid) {\n            dataMap[record.uid] = combine(dataMap[record.uid], record);\n        }\n        else {\n            dataMap[record.source + \":\" + record.sid] = record;\n        }\n    }\n\n    send(JSON.stringify(Object.keys(dataMap).map(function(key){ return dataMap[key]; }), null, 2)); // jshint ignore:line\n}"
            },
            "views": {
                "unified": {
                    "map": "function(doc) {\n    \"use strict\";\n    var key = doc.uid ? doc.uid : doc.source + \":\" + doc.sid;\n    emit(key, doc);\n}",
                    "reduce-deprecated": "function(keys, values, rereduce) {\n    \"use strict\";\n\n    // Reduce all the records with the same \"parent\" ID to a single structure...\n    function combine(existingRecord, newRecord) {\n        var combinedRecord = existingRecord ? JSON.parse(JSON.stringify(existingRecord)) : {};\n\n        if (existingRecord) {\n            if (newRecord.source === \"unified\") {\n                combinedRecord = JSON.parse(JSON.stringify(newRecord));\n                if (!combinedRecord.sources) {\n                    combinedRecord.sources = [];\n                }\n\n                if (existingRecord.sources) {\n                    existingRecord.sources.forEach(function(source){\n                        combinedRecord.sources.push(JSON.parse(JSON.stringify(source)));\n                    });\n                }\n            }\n            else if (newRecord.sources) {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                newRecord.sources.forEach(function(record){\n                    if (record) {\n                        combinedRecord.sources.push(JSON.parse(JSON.stringify(record)));\n                    }\n                });\n            }\n            else {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                combinedRecord.sources.push(JSON.parse(JSON.stringify(newRecord)));\n            }\n        }\n        else {\n            if (newRecord.source === \"unified\") {\n                combinedRecord = JSON.parse(JSON.stringify(newRecord));\n            }\n            else if (newRecord.sources) {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                newRecord.sources.forEach(function(record){\n                    combinedRecord.sources.push(JSON.parse(JSON.stringify(record)));\n                });\n            }\n            else {\n                if (!combinedRecord.sources) { combinedRecord.sources = []; }\n                combinedRecord.sources.push(JSON.parse(JSON.stringify(newRecord)));\n            }\n        }\n\n        return combinedRecord;\n    }\n\n    if (rereduce) {\n        // If we are rereducing, combine clusters with the same UID, making sure to:\n        // 1. Preserve the unified record wrapper details\n        // 2. Combine all partial \"sources\" arrays\n        // 3. Preserve all unique records with no cluster data\n\n        var rereduced = {};\n        values.forEach(function(partial){\n            Object.keys(partial).forEach(function(key){\n                var record = partial[key];\n                if (record.uid || record.sources) {\n                    var combinedRecord = combine(rereduced[key], record);\n                    rereduced[key] = combinedRecord;\n                }\n                else {\n                    // If the record has no uid and is not a partial, it will stand alone as its own record.\n                    rereduced[key] = record;\n                }\n            });\n        });\n        return rereduced;\n    }\n    else {\n        var reduced = {};\n        for (var a = 0; a < values.length; a++) {\n            var record = values[a];\n            var key = record.uid;\n\n            if (record.uid) {\n                var combinedRecord = combine(reduced[key], record);\n                reduced[key] = combinedRecord;\n            }\n            else {\n                // If the record has no uid, it will stand alone as its own record.\n                reduced[record.source + \":\" + record.sid] = record;\n            }\n        }\n\n        return reduced;\n    }\n}"
                },
                "unified-clustered": {
                    "map": "function(doc) {\n    \"use strict\";\n    if (doc.uid) {\n        emit(doc.uid, doc);\n    }\n}"
                },
                "orphans": {
                    "map": "function(doc) {\n    if (!doc.uid && doc.source !== \"unified\") {\n        emit([doc.source, doc.sid], doc);\n    }\n}"
                },
                "records": {
                    "map": "function(doc) {\n    if (doc.source && doc.sid) {\n        emit([doc.source, doc.sid],doc);\n    }\n}"
                },
                "parents": {
                    "map": "function(doc) {\n    if (doc.source === \"unified\") {\n        emit(doc.uid, doc);\n    }\n}"
                },
                "children": {
                    "map": "function(doc) {\n    if (doc.uid && doc.source !== \"unified\") {\n        emit(doc.uid, doc);\n    }\n}"
                }
            }
        }
    ]
}